// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace GameIndustry.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using GameIndustry;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using GameIndustry.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using GameIndustry.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using GameIndustry.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using System.Timers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Gitrepositories\BlazzorApp\GameIndustry\_Imports.razor"
using GameIndustry.Helpers;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/rsp")]
    public partial class RSPMiniGamerazor : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 89 "E:\Gitrepositories\BlazzorApp\GameIndustry\Pages\RSPMiniGamerazor.razor"
       
    int playersScore = 0;
    int computersScore = 0;
    Timer timer;
    string gameResultMsg = string.Empty;
    string resultStye = string.Empty;
    List<GameHandler> games = SetItemsForGames();
    GameHandler opponent;
    Random rnd;
    int imgIndex = 0;
    string winersGif = string.Empty;
    protected override void OnInitialized()
    {
        rnd = new Random(DateTime.Now.Millisecond);
        opponent = games[0];
        timer = new Timer();
        timer.Interval = 100;
        timer.Elapsed += ElapsedTimer;
        timer.Start();
    }
    async void ElapsedTimer(object sender, ElapsedEventArgs args)
    {
        imgIndex = rnd.Next(0, games.Count);
        opponent = games[imgIndex];
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }
    protected void SelectingHandler(GameHandler choosenGame)
    {
        timer.Stop();
        GameRemover(choosenGame);
        GameState gameResult = choosenGame.GameResult(opponent);

        switch (gameResult)
        {
            case GameState.Victory:
                {
                    gameResultMsg = "Congratulation Mortal! You Win !";
                    resultStye = "success";
                    playersScore += 100;

                }
                break;
            case GameState.Lose:
                {
                    gameResultMsg = "Ha Ha HA what a pathetic attempt! YOU LOSE!";
                    resultStye = "danger";
                    computersScore += 100;

                }
                break;
            case GameState.Draw:
                {
                    gameResultMsg = "I can read ur thoughts! Draw!";
                    resultStye = "info";
                }
                break;

        }
        ShowWinnersGif();
    }
    protected void ReloadGame()
    {
        timer.Start();
        gameResultMsg = string.Empty;
        resultStye = string.Empty;

        games = SetItemsForGames();


    }
    protected void ShowWinnersGif()
    {
        if (playersScore > computersScore)
        {
            winersGif = "./gifs/angel.gif";
        }
        else if (computersScore > playersScore)
        {
            winersGif = "./gifs/devil.gif";
        }
        else
        {
            winersGif = string.Empty;
        }
    }
    protected void GameRemover(GameHandler choosenGame)
    {
        int counter = 0;
        while (games.Count != 1)
        {

            if (games[counter] != choosenGame)
            {
                games.Remove(games[counter]);
                counter--;
            }
            counter++;
        }

    }
    protected static List<GameHandler> SetItemsForGames()
    {
        List<GameHandler> games = new List<GameHandler>
    {
        new GameHandler
        {
            Choose = RSPOptions.Paper,
            LoseCondition =RSPOptions.Scissors,
            WinCondition = RSPOptions.Rock,
            ImagePath = "./imgs/paper.png"

        },
         new GameHandler
        {
            Choose = RSPOptions.Scissors,
            LoseCondition =RSPOptions.Rock,
            WinCondition = RSPOptions.Paper,
            ImagePath = "./imgs/scissors.png"
        },
         new GameHandler
        {
            Choose = RSPOptions.Rock,
            LoseCondition =RSPOptions.Paper,
            WinCondition = RSPOptions.Scissors,
            ImagePath = "./imgs/rock.png"
        }
         };
        return games;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591

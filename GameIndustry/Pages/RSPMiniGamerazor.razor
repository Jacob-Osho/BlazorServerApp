@page "/rsp"


@implements IDisposable
<div class="row text-center">
    @*<div class="col">*@
    <div class="col alert alert-success">
        <h5>  Players Score :@playersScore</h5>
    </div>
    <div class="col">
        <h1 class="text-success">
            RSP MiniGAme
        </h1>
    </div>
    <div class="col alert alert-danger">
        <h5> God'S of RSP Score :@computersScore</h5>
    </div>

    @* </div>*@
</div>

@if (!string.IsNullOrWhiteSpace(gameResultMsg))
{
    <div class="row ">
        <div class="col text-center alert alert-@resultStye">
            <h3>@gameResultMsg</h3>
        </div>
    </div>
}
@if (!string.IsNullOrWhiteSpace(winersGif) && playersScore > computersScore)
{
    <div class="row text-center">
        <div class="col mb-5 justify-content-center">
            <img src="@winersGif" class="general-image" />
        </div>
        <div class="col mb-5 justify-content-center">
            <img src="@opponent.ImagePath" class="general-image" />
        </div>
        <div class="col mb-5 justify-content-center">
            @*<img src="@opponent.ImagePath" class="general-image" />*@
        </div>
    </div>
}
else if (!string.IsNullOrWhiteSpace(winersGif) && playersScore < computersScore)
{
    <div class="row text-center">
        <div class="col mb-5 justify-content-center">
      @*      <img src="@winersGif" class="general-image" />*@
        </div>
        <div class="col mb-5 justify-content-center">
            <img src="@opponent.ImagePath" class="general-image" />
        </div>
        <div class="col mb-5 justify-content-center">
            <img src="@winersGif" class="general-image" />
        </div>
    </div>
}
else
{
    <div class="row text-center">
        <div class="col mb-5 justify-content-center">
            <img src="@opponent.ImagePath" class="general-image" />
        </div>
    </div>
}
<div class="row text-center">
    <div class="col mb-5 justify-content-center">
        <button class="btn btn-primary button-style hovered-image" @onclick="ReloadGame">Start New Game</button>
    </div>
</div>
<div class="row text-center justify-content-around " style="margin-bottom: 30px">
    @*  <div class="col">
        <img src="./imgs/paper.png" class="general-image hovered-image" />
        </div>
        <div class="col">
        <img src="./imgs/rock.png" class="general-image hovered-image" />
        </div>
        <div class="col">
        <img src="./imgs/scissors.png" class="general-image hovered-image" />
        c*@
    @foreach (var iteam in games)
    {
        <div class="col">
            <img src="@iteam.ImagePath" class="general-image hovered-image " @onclick="(()=> SelectingHandler(iteam))" />
        </div>
    }
</div>

@code {
    int playersScore = 0;
    int computersScore = 0;
    Timer timer;
    string gameResultMsg = string.Empty;
    string resultStye = string.Empty;
    List<GameHandler> games = SetItemsForGames();
    GameHandler opponent;
    Random rnd;
    int imgIndex = 0;
    string winersGif = string.Empty;
    protected override void OnInitialized()
    {
        rnd = new Random(DateTime.Now.Millisecond);
        opponent = games[0];
        timer = new Timer();
        timer.Interval = 100;
        timer.Elapsed += ElapsedTimer;
        timer.Start();
    }
    async void ElapsedTimer(object sender, ElapsedEventArgs args)
    {
        imgIndex = rnd.Next(0, games.Count);
        opponent = games[imgIndex];
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }
    protected void SelectingHandler(GameHandler choosenGame)
    {
        timer.Stop();
        GameRemover(choosenGame);
        GameState gameResult = choosenGame.GameResult(opponent);

        switch (gameResult)
        {
            case GameState.Victory:
                {
                    gameResultMsg = "Congratulation Mortal! You Win !";
                    resultStye = "success";
                    playersScore += 100;

                }
                break;
            case GameState.Lose:
                {
                    gameResultMsg = "Ha Ha HA what a pathetic attempt! YOU LOSE!";
                    resultStye = "danger";
                    computersScore += 100;

                }
                break;
            case GameState.Draw:
                {
                    gameResultMsg = "I can read ur thoughts! Draw!";
                    resultStye = "info";
                }
                break;

        }
        ShowWinnersGif();
    }
    protected void ReloadGame()
    {
        timer.Start();
        gameResultMsg = string.Empty;
        resultStye = string.Empty;

        games = SetItemsForGames();


    }
    protected void ShowWinnersGif()
    {
        if (playersScore > computersScore)
        {
            winersGif = "./gifs/angel.gif";
        }
        else if (computersScore > playersScore)
        {
            winersGif = "./gifs/devil.gif";
        }
        else
        {
            winersGif = string.Empty;
        }
    }
    protected void GameRemover(GameHandler choosenGame)
    {
        int counter = 0;
        while (games.Count != 1)
        {

            if (games[counter] != choosenGame)
            {
                games.Remove(games[counter]);
                counter--;
            }
            counter++;
        }

    }
    protected static List<GameHandler> SetItemsForGames()
    {
        List<GameHandler> games = new List<GameHandler>
    {
        new GameHandler
        {
            Choose = RSPOptions.Paper,
            LoseCondition =RSPOptions.Scissors,
            WinCondition = RSPOptions.Rock,
            ImagePath = "./imgs/paper.png"

        },
         new GameHandler
        {
            Choose = RSPOptions.Scissors,
            LoseCondition =RSPOptions.Rock,
            WinCondition = RSPOptions.Paper,
            ImagePath = "./imgs/scissors.png"
        },
         new GameHandler
        {
            Choose = RSPOptions.Rock,
            LoseCondition =RSPOptions.Paper,
            WinCondition = RSPOptions.Scissors,
            ImagePath = "./imgs/rock.png"
        }
         };
        return games;
    }
}
